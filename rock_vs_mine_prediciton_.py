# -*- coding: utf-8 -*-
"""Rock vs Mine Prediciton .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Ih2H5ptfzzrR8BbYrIqS0f_2cwsl8PC
"""

#Rock vs Mine Prediction

import pandas as pd
import numpy as np
import matplotlib as plt
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/Copy of sonar data.csv')
df

df.head()

df.shape

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

sonar_data = pd.read_csv('/content/Copy of sonar data.csv',header=None)

sonar_data.head()

sonar_data.describe()

sonar_data[60].value_counts()

"""R - ROCK
M - MINE
"""

#seperating data and label

x = sonar_data.drop(columns=60,axis=1)

Y = sonar_data[60]
x
Y

"""Training and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(x,Y, test_size = 0.1,stratify=Y,random_state=1)

print(x.shape)
print(X_train.shape)
print(X_test.shape)

"""Model Training -> Logisitic Regression"""

model = LogisticRegression()

"""Training the logistic regression model with training data"""

model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy on training data
X_train_predicition = model.predict(X_train)
training_data_accuracy_score = accuracy_score(X_train_predicition, Y_train)
print(training_data_accuracy_score) #accuracy score of our training data

#accuracy on test data
X_test_predicition = model.predict(X_test)
test_data_accuracy_score = accuracy_score(X_test_predicition, Y_test)
print(test_data_accuracy_score) #accuracy score of our test data

"""Predicitve System"""

input_data=(0.0270,0.0092,0.0145,0.0278,0.0412,0.0757,0.1026,0.1138,0.0794,0.1520,0.1675,0.1370,0.1361,0.1345,0.2144,0.5354,0.6830,0.5600,0.3093,0.3226,0.4430,0.5573,0.5782,0.6173,0.8132,0.9819,0.9823,0.9166,0.7423,0.7736,0.8473,0.7352,0.6671,0.6083,0.6239,0.5972,0.5715,0.5242,0.2924,0.1536,0.2003,0.2031,0.2207,0.1778,0.1353,0.1373,0.0749,0.0472,0.0325,0.0179,0.0045,0.0084,0.0010,0.0018,0.0068,0.0039,0.0120,0.0132,0.0070,0.0088)

#chaning list to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape numpy array as we are predicitng for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction  = model.predict(input_data_reshaped)
print(prediction)

input_data=(0.0162,0.0253,0.0262,0.0386,0.0645,0.0472,0.1056,0.1388,0.0598,0.1334,0.2969,0.4754,0.5677,0.5690,0.6421,0.7487,0.8999,1.0000,0.9690,0.9032,0.7685,0.6998,0.6644,0.5964,0.3711,0.0921,0.0481,0.0876,0.1040,0.1714,0.3264,0.4612,0.3939,0.5050,0.4833,0.3511,0.2319,0.4029,0.3676,0.1510,0.0745,0.1395,0.1552,0.0377,0.0636,0.0443,0.0264,0.0223,0.0187,0.0077,0.0137,0.0071,0.0082,0.0232,0.0198,0.0074,0.0035,0.0100,0.0048,0.0019)

#chaning list to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape numpy array as we are predicitng for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction  = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 'R'):
  print("its a rock")
else:
  print("its a mine")